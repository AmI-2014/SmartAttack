'''
Created on Jun 9, 2014

@author: POLITO\s182340
'''
import Queue
import cherrypy
import json

def jsonify(func):
    '''JSON decorator for CherryPy'''
    @wraps(func)
    def wrapper(*args, **kwargs): # *args are the function positional arguments, kwargs are the function keyword arguments
        # call the function and store the result in the value variable
        value = func(*args, **kwargs)
        # set the response content-type to json
        cherrypy.response.headers["Content-Type"] = "application/json"
        # serialize as json
        return json.dumps(value, indent=4, default=lambda o: o.__dict__)

    return wrapper



class QueueManager:
    
    exposed=True

    def __init__(self):
        self.coda=Queue(0)
    
    @jsonify
    def POST(self):
        add_request=json.loads(cherrypy.request.body.read())
        self.coda.put(add_request)
    
    @jsonify
    def GET(self, check_is_empty=None, check_length=None):
        if(check_is_empty!=None):
            return self.coda.empty()
        else:
            if(check_length!=None):
                return self.coda.qsize()
            else:
                return self.coda.get()              
        
        

    
    
    
if __name__ == '__main__':
    cherrypy.tree.mount(
                    QueueManager(), 'api/v1/queuemanager', 
                    {'/':
        {'request.dispatch': cherrypy.dispatch.MethodDispatcher()}
    }
    )

cherrypy.engine.start()
cherrypy.engine.block()
        
